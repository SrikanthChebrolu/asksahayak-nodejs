{
  "variables": [],
  "info": {
    "name": "Conduit API Tests",
    "_postman_id": "dda3e595-02d7-bf12-2a43-3daea0970192",
    "description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [{
      "name": "Auth",
      "description": "",
      "item": [{
          "name": "Register",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users/login",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "",
                "if(tests['User has \"token\" property']){",
                "    postman.setEnvironmentVariable('token', user.token);",
                "}",
                "",
                "tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users/login",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/user",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/user",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "campaigns with authentication",
      "description": "",
      "item": [{
          "name": "Feed",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/feed",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Campaigns",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Campaigns with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns by Author",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns by Author with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob",
                "equals": true,
                "description": ""
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns Favorited by Username",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns Favorited by Username with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns by Tag",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?tag=dragons",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "tag",
                "value": "dragons"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "if(tests['Campaign has \"slug\" property']){",
                "    postman.setEnvironmentVariable('slug', campaign.slug);",
                "}",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"campaign\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Campaign by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Update Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"campaign\":{\"body\":\"With two hands\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Favorite Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests[\"Campaign's 'favorited' property is true\"] = campaign.favorited === true;",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "tests[\"Campaign's 'favoritesCount' property is greater than 0\"] = campaign.favoritesCount > 0;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}/favorite",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfavorite Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "tests[\"Campaign's \\\"favorited\\\" property is true\"] = campaign.favorited === false;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}/favorite",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Campaigns",
      "description": "",
      "item": [{
          "name": "All Campaigns",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns by Author",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns Favorited by Username",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Campaigns by Tag",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"campaigns\" property'] = responseJSON.hasOwnProperty('campaigns');",
                "    tests['Response contains \"campaignsCount\" property'] = responseJSON.hasOwnProperty('campaignsCount');",
                "    tests['campaignsCount is an integer'] = Number.isInteger(responseJSON.campaignsCount);",
                "",
                "    if(responseJSON.campaigns.length){",
                "        var campaign = responseJSON.campaigns[0];",
                "",
                "        tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "        tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "        tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "        tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "        tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "        tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "        tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "        tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "        tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "        tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "        tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "        tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "        tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                "    } else {",
                "        tests['campaignsCount is 0 when feed is empty'] = responseJSON.campaignsCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/campaigns?tag=dragons",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "campaigns"
              ],
              "query": [{
                "key": "tag",
                "value": "dragons"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Campaign by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"campaign\" property'] = responseJSON.hasOwnProperty('campaign');",
                "",
                "var campaign = responseJSON.campaign || {};",
                "",
                "tests['Campaign has \"title\" property'] = campaign.hasOwnProperty('title');",
                "tests['Campaign has \"slug\" property'] = campaign.hasOwnProperty('slug');",
                "tests['Campaign has \"body\" property'] = campaign.hasOwnProperty('body');",
                "tests['Campaign has \"createdAt\" property'] = campaign.hasOwnProperty('createdAt');",
                "tests['Campaign\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(campaign.createdAt).toISOString() === campaign.createdAt;",
                "tests['Campaign has \"updatedAt\" property'] = campaign.hasOwnProperty('updatedAt');",
                "tests['Campaign\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(campaign.updatedAt).toISOString() === campaign.updatedAt;",
                "tests['Campaign has \"description\" property'] = campaign.hasOwnProperty('description');",
                "tests['Campaign has \"tagList\" property'] = campaign.hasOwnProperty('tagList');",
                "tests['Campaign\\'s \"tagList\" property is an Array'] = Array.isArray(campaign.tagList);",
                "tests['Campaign has \"author\" property'] = campaign.hasOwnProperty('author');",
                "tests['Campaign has \"favorited\" property'] = campaign.hasOwnProperty('favorited');",
                "tests['Campaign has \"favoritesCount\" property'] = campaign.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(campaign.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "description": "",
      "item": [{
          "name": "All Comments for Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
                "",
                "    if(responseJSON.comments.length){",
                "        var comment = responseJSON.comments[0];",
                "",
                "        tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                "        tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                "        tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                "        tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(comment.createdAt).toISOString() === comment.createdAt;",
                "        tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                "        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = new Date(comment.updatedAt).toISOString() === comment.updatedAt;",
                "        tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}/comments",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Comment for Campaign",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
                "",
                "var comment = responseJSON.comment || {};",
                "",
                "tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                "tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                "tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                "tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(comment.createdAt).toISOString() === comment.createdAt;",
                "tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}/comments",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Delete Comment for Campaign",
          "request": {
            "url": "{{apiUrl}}/campaigns/{{slug}}/comments/1",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profiles",
      "description": "",
      "item": [{
          "name": "Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Follow Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfollow Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "description": "",
      "item": [{
        "name": "All Tags",
        "event": [{
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var is200Response = responseCode.code === 200;",
              "",
              "tests['Response code is 200 OK'] = is200Response;",
              "",
              "if(is200Response){",
              "    var responseJSON = JSON.parse(responseBody);",
              "    ",
              "    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
              "    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
              "}",
              ""
            ]
          }
        }],
        "request": {
          "url": "{{apiUrl}}/tags",
          "method": "GET",
          "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            },
            {
              "key": "X-Requested-With",
              "value": "XMLHttpRequest",
              "description": ""
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": ""
        },
        "response": []
      }]
    },
    {
      "name": "Cleanup",
      "description": "",
      "item": [{
        "name": "Delete Campaign",
        "request": {
          "url": "{{apiUrl}}/campaigns/{{slug}}",
          "method": "DELETE",
          "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            },
            {
              "key": "X-Requested-With",
              "value": "XMLHttpRequest",
              "description": ""
            },
            {
              "key": "Authorization",
              "value": "Token {{token}}",
              "description": ""
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": ""
        },
        "response": []
      }]
    }
  ]
}
